# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V0lBuDoWmuiZ_oA7LSvrlVg8InLfrGhB
"""

'''
{
  "numero_casas": 5,
  "token": "https://www.codenation.dev/", Retirei o meu token por questão de segurança.
  "cifrado": "bmjs ns itzgy, qjfaj ny tzy. otxmzf gqthm",
  "decifrado": "",
  "resumo_criptografico": ""
}
'''
#Importando as bibliotecas.
import json
import requests
import hashlib

#Criação de variáveis.
alfabeto = 'abcdefghijklmnopqrstuvwxyz'
casa = 5

#Armazenando uma requisição com metódo get.
resp = requests.get('https://api.codenation.dev/v1/challenge/dev-ps/generate-data?token=765809a7645fd4f54c849d2aaf6ea2bab19e1d58')

#Criando dicionário para armazenar a resposta da requisição.
conteudo = json.loads(resp.content)

#Retornando apenas a mensagem cifrada.
mensagem = (conteudo["cifrado"])

#Função para descriptografar.
def descriptar(mensagem):
  result = ''
  for letra in mensagem:
    if letra in alfabeto:
      letra_index = alfabeto.index(letra)
      result += alfabeto[(letra_index - casa) % len(alfabeto)]
    else:
      result += letra
  return result

#Atualizando o campo "decifrado" com a mensagem descriptografada da função.
conteudo["decifrado"] = descriptar(mensagem)

#Utilizando o construtor sha1 da hashlib
hashValue = hashlib.sha1()

#Utilizando o método update.
hashValue.update(conteudo["decifrado"].encode('utf-8'))

#Recebendo o resultao no campo "resumo_criptografico"
conteudo["resumo_criptografico"] = m.hexdigest()

#Criando um arquivo com o nome "answer.json" no google drive.
with open('/content/drive/My Drive/datasets/answer.json', 'w') as json_file:
  json.dump(conteudo, json_file, indent=4)